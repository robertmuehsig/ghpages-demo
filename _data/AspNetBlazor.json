{"Data":{"GitHubIssues":{"Issues":[{"Id":"327944108","IsPullRequest":false,"CreatedAt":"2018-05-31T00:11:26","Actor":"BenHayat","Number":"906","RawContent":null,"Title":"Where can I get Steve's Samples from NDC Minnesota 2018?","State":"open","Body":"Hello Team;\r\n\r\nWhere can I find Steve's samples he did for NDC Minnesota 2018?\r\n\r\nThanks!","Url":"https://github.com/aspnet/Blazor/issues/906","RelatedDescription":"Open issue \"Where can I get Steve's Samples from NDC Minnesota 2018?\" (#906)"},{"Id":"327896867","IsPullRequest":false,"CreatedAt":"2018-05-30T20:58:58","Actor":"TheUltimateHose","Number":"905","RawContent":null,"Title":"NavLink customizable tag","State":"open","Body":"The `<NavLink>` by default becomes an `<a>` tag. As I wanted to implement a standard bootstrap navbar, the `active` class needed to be on a `<li>` tag instead.\r\n\r\nI therefore created a `TaggableNavLink` class that takes an additional parameter\r\n```cs\r\n[Parameter]\r\nstring Tag { get; set; }\r\n```\r\nto specify the tag, and used this in the `private void Render(...)` function, where I now write\r\n```cs\r\nbuilder.OpenElement(0, Tag);\r\n```\r\n\r\ninstead of hard-coding\r\n```cs\r\nbuilder.OpenElement(0, \"a\");\r\n```\r\n\r\nI also included logic to parse the parameter and have `<a>` as the default tag.\r\n\r\nAs I stated, this is part of a small project I'm doing with blazor and as far as I can tell so far, it works without problems and shouldn't have any side effects.\r\n\r\n---\r\n\r\nGiven that this was quite trivial to implement, there might has been a design choice made to hard-code this instead of exposing it as a parameter.\r\n\r\nIf it was just not considered as a requirement before, I'll happily submit my solution as a PR once I tested it a bit more thoroughly.","Url":"https://github.com/aspnet/Blazor/issues/905","RelatedDescription":"Open issue \"NavLink customizable tag\" (#905)"},{"Id":"326679428","IsPullRequest":false,"CreatedAt":"2018-05-30T16:19:12","Actor":"mikebrind","Number":"887","RawContent":null,"Title":"Question: How do you reset the selected index of a dependent select element?","State":"closed","Body":"I have been playing with cascading dropdown lists, and have noticed that the dependent dropdown retains the selectedIndex value when the primary dropdown option is changed and the dependent is populated with a different set of options. I have used both the `bind` syntax and the `onchange` option with the same result.\r\n\r\nTo repro, I used the ASP.NET Core Hosted template and added a couple of classes to the Shared project:\r\n\r\n``` csharp\r\npublic class Author\r\n{\r\n    public int AuthorId { get; set; }\r\n    public string Name { get; set; }\r\n    public ICollection<Book> Books { get; set; }\r\n}\r\n\r\npublic class Book\r\n{\r\n    public int BookId { get; set; }\r\n    public string Title { get; set; }\r\n    public int YearPublished { get; set; }\r\n    public decimal Price { get; set; }\r\n    public Author Author { get; set; }\r\n}\r\n```\r\nThen a controller to the Server project:\r\n\r\n```csharp\r\nusing BlazorTests.Shared;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing System.Collections.Generic;\r\n\r\nnamespace BlazorTests.Server.Controllers\r\n{\r\n    [Produces(\"application/json\")]\r\n    [Route(\"api/book\")]\r\n    public class BookController : Controller\r\n    {\r\n        private static readonly List<Author> authors = new List<Author>{\r\n            new Author{\r\n                AuthorId = 1, Name = \"Tom Clancy\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 1, Title = \"Sum of all Fears\",YearPublished = 1991, Price = 7.48m},\r\n                    new Book{BookId = 2, Title = \"Rainbow Six\", YearPublished = 1998, Price = 6.99m},\r\n                    new Book{BookId = 3, Title = \"Hunt for Red October\", YearPublished = 1984, Price = 4.99m}\r\n                }\r\n            },\r\n            new Author{\r\n                AuthorId = 2, Name = \"Stephen King\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 4, Title = \"Carrie\", YearPublished = 1974, Price = 5.99m},\r\n                    new Book{BookId = 5, Title = \"The Stand\", YearPublished = 1978, Price = 4.99m},\r\n                    new Book{BookId = 6, Title = \"Black House\", YearPublished = 2001, Price = 5.99m},\r\n                    new Book{BookId = 7, Title = \"It\", YearPublished = 1986, Price = 6.99m}\r\n                }\r\n            },\r\n            new Author{\r\n                AuthorId = 3, Name = \"Robert Ludlum\", Books = new List<Book>\r\n                {\r\n                    new Book{BookId = 8, Title = \"The Bourne Ultimatum\", YearPublished = 1990, Price = 5.99m},\r\n                    new Book{BookId = 9, Title = \"The Holcroft Covenant\", YearPublished = 1978, Price = 4.99m},\r\n                    new Book{BookId = 10, Title = \"The Rhineman Exchange\", YearPublished = 1974, Price = 4.99m}\r\n                }\r\n            }\r\n        };\r\n\r\n        [HttpGet]\r\n        public IEnumerable<Author> Get()\r\n        {\r\n            return authors;\r\n        }\r\n    }\r\n}\r\n```\r\nAnd finally a Books.cshtml component to the Client project:\r\n\r\n```\r\n@using BlazorTests.Shared\r\n@page \"/books\"\r\n@inject HttpClient http\r\n\r\n<h1>Books</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n@if (authors == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <select id=\"authors\" onchange=\"@AuthorSelectionChanged\">\r\n        <option></option>\r\n        @foreach (var author in authors)\r\n        {\r\n            <option value=\"@author.AuthorId\">@author.Name</option>\r\n        }\r\n    </select>\r\n}\r\n@if (books != null)\r\n{\r\n    <select id=\"books\" onchange=\"@BookSelectionChanged\">\r\n        <option></option>\r\n        @foreach (var book in books)\r\n        {\r\n            <option value=\"@book.BookId\">@book.Title</option>\r\n        }\r\n    </select>\r\n}\r\n@if(selectedBook != null)\r\n{\r\n    <div>\r\n        Title: @selectedBook.Title<br />\r\n        Year published: @selectedBook.YearPublished<br />\r\n        Price: @selectedBook.Price\r\n    </div>\r\n}\r\n\r\n\r\n@functions {\r\n\r\n    Author[] authors;\r\n    Book[] books;\r\n    Book selectedBook;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        authors = await http.GetJsonAsync<Author[]>(\"/api/book\");\r\n    }\r\n\r\n\r\n    void AuthorSelectionChanged(UIChangeEventArgs e)\r\n    {\r\n        books = null;\r\n        if (int.TryParse(e.Value.ToString(), out int id))\r\n        {\r\n            books = authors.First(a => a.AuthorId == id).Books.ToArray();\r\n        }\r\n\r\n    }\r\n\r\n    void BookSelectionChanged(UIChangeEventArgs e)\r\n    {\r\n        if (int.TryParse(e.Value.ToString(), out int id))\r\n        {\r\n            selectedBook = books.FirstOrDefault(b => b.BookId == id);\r\n        }\r\n        else\r\n        {\r\n            selectedBook = null;\r\n        }\r\n    }\r\n}\r\n```\r\nSelect an author, then select a book. Then select a different author and the books option at the selected index of the previous choice is selected. The only time this is not the case is when the author is changed after selecting the 4th book in the Stephen King list. There are only 3 books assigned to the other authors.\r\n\r\nIdeally, I'd like to be able to have the selectedIndex of the dependent set to -1 when the Author selection is changed. How do I do that?","Url":"https://github.com/aspnet/Blazor/issues/887","RelatedDescription":"Closed issue \"Question: How do you reset the selected index of a dependent select element?\" (#887)"},{"Id":"327674511","IsPullRequest":true,"CreatedAt":"2018-05-30T10:54:51","Actor":"SteveSandersonMS","Number":"904","RawContent":null,"Title":"Move <TemplateBlazorPackageVersion> prop to dependencies.props","State":"closed","Body":"Small bit of outstanding CR feedback from #559 ages ago","Url":"https://github.com/aspnet/Blazor/pull/904","RelatedDescription":"Closed or merged PR \"Move <TemplateBlazorPackageVersion> prop to dependencies.props\" (#904)"},{"Id":"327619078","IsPullRequest":false,"CreatedAt":"2018-05-30T08:08:51","Actor":"karlosRivera","Number":"903","RawContent":null,"Title":"VS2017 version and Blazor template issue","State":"open","Body":"i update my vs ide 2017 using update option from IDE. approx more than 7GB things download and installed. i again check the version then it was showing VS IDE version 15.7.2 but found no .net core 2.1 version when try to open project and blazor template was missing.\r\n\r\nfrom this link https://www.c-sharpcorner.com/article/asp-net-core-getting-started-with-blazor/\r\n\r\ni came to know that i need to install Install .NET Core 2.1 Preview 2 SDK and i did.\r\n\r\nagain try to install https://marketplace.visualstudio.com/items?itemName=aspnet.blazor\r\n\r\nwhen i try to install ASP.NET Core Blazor Language Services\r\n\r\nthen i encounter some problem. \r\n\r\ni try to install Microsoft.VisualStudio.BlazorExtension and the error i got\r\n![blzr](https://user-images.githubusercontent.com/4988738/40707600-fd49f57a-63a5-11e8-9274-3f2da0a2c8df.png)\r\n\r\nplease guide me what i need to open blazor project with my VS2017 v15.7.2.\r\n\r\nthanks","Url":"https://github.com/aspnet/Blazor/issues/903","RelatedDescription":"Open issue \"VS2017 version and Blazor template issue\" (#903)"},{"Id":"327537168","IsPullRequest":false,"CreatedAt":"2018-05-30T01:03:19","Actor":"rpedretti","Number":"902","RawContent":null,"Title":"Binding to ondragstart prevent any other drag event to fire","State":"open","Body":"```\r\n@page \"/\"\r\n@using Microsoft.AspNetCore.Blazor\r\n\r\n<h1 draggable=\"true\" ondragstart=\"@Dragstart\" ondragend=\"@Dragend\">Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n\r\n@functions {\r\n    private void Dragstart(UIDragEventArgs a)\r\n    {\r\n        Console.WriteLine(\"Start\");\r\n    }\r\n\r\n\r\n    private void Dragend(UIDragEventArgs a)\r\n    {\r\n        Console.WriteLine(\"end\");\r\n    }\r\n}\r\n```\r\nIf the vents are bound to a javascript function they work properly, but binding to C# dont't.  Having this at homepage show the bug\r\n","Url":"https://github.com/aspnet/Blazor/issues/902","RelatedDescription":"Open issue \"Binding to ondragstart prevent any other drag event to fire\" (#902)"},{"Id":"327479062","IsPullRequest":false,"CreatedAt":"2018-05-29T20:39:59","Actor":"BenHayat","Number":"901","RawContent":null,"Title":"Feedback - Make Blazor happen","State":"open","Body":"Hi Team;\r\n\r\nJust watched Steven Sanderon's powerful 2018 NDC conference on Blazor and it brought a lot of great memories of Silverlight days of building Web Apps using .Net\r\nBlazor is the perfect evolution of SL to build real powerful apps backed by .Net and not js technology. \r\n\r\nSteve said at the end, the future of Blazor depended on Customers' feedback and interest. \"I\" as a long time  .Net developer focusing on Web Technology would like to vote my strongest desire to see this product in production. This is the future of Web development. Blazor WILL attract a lot of people into .Net and MST space.\r\nSo, PLEASE MAKE IT HAPPEN!!!\r\n\r\nAlso, please build native Signalr Core client interface into Blazor so we can build Real-Time apps. The Shared project makes it super easy to share our server and client share same classes. \r\n\r\nOnce it's baked a bit more, I'll be diving in seriously.\r\nThank you team for such great product.\r\n..Ben\r\n","Url":"https://github.com/aspnet/Blazor/issues/901","RelatedDescription":"Open issue \"Feedback - Make Blazor happen\" (#901)"},{"Id":"327306334","IsPullRequest":false,"CreatedAt":"2018-05-29T19:13:52","Actor":"Diemauerdk","Number":"898","RawContent":null,"Title":"Pass parameters to dynamically created component","State":"closed","Body":"Hi,\r\n\r\nI am trying to send parameters to a component that is created dynamically using the RenderTreeBuilder and RenderFragment. What i basically does to create the render fragment is this is:\r\n\r\n` private RenderFragment GetContent(Type type)\r\n        {\r\n            return builder =>\r\n            {\r\n                builder.OpenComponent(0, type);\r\n                builder.CloseComponent();\r\n            };\r\n        }`\r\n\r\nThat code is very simple and working fine.\r\n\r\nHowever I want to be able to send various parameters to the dynamically created comonents. A start could just be an id of type string.\r\n\r\nAnyone know if or how this is supported by the framework?\r\n\r\nThanks :)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/898","RelatedDescription":"Closed issue \"Pass parameters to dynamically created component\" (#898)"},{"Id":"327309323","IsPullRequest":false,"CreatedAt":"2018-05-29T19:12:36","Actor":"dlr1","Number":"899","RawContent":null,"Title":"[question] Implementing guards for Routes","State":"closed","Body":"I was able to declare all the routes in one place and change a few lines of code in how the  RouteTable is created and let blazor do all the other things from there and this seem to work (I had to duplicate bunch of classes as they are all internal). now If I want to implement guards on routes,  I was thinking if a page implements interface, I would like to call that method to see if I can route to that or leave that page, what would be a good place for doing that.","Url":"https://github.com/aspnet/Blazor/issues/899","RelatedDescription":"Closed issue \"[question] Implementing guards for Routes\" (#899)"},{"Id":"327344127","IsPullRequest":false,"CreatedAt":"2018-05-29T16:35:00","Actor":"HansUrschel","Number":"900","RawContent":null,"Title":"No Content appears","State":"closed","Body":"I hope someone can help me. I install .Net Core 2.1 Preview ( dotnet --version shows 2.1.300-preview1-008174 ). I works with VS2017 Community Edition Version 15.7.2 and Windows 10. ASP.NET and webdevelopment is installed. Now I downloaded and install the ASP.NET Core Blazor Language Services extension. I start my VS, select File -> New Project -> Web -> ASP.NET Core Web Application. .Net Core and ASP.NET Core 2.0 is active. I select \"Blazor\" and named my project BlazorTest. All seems ok. I start my project with Ctrl-F5. The Command-Window appears and tell me the program is launching at port 59790. A browser-window (Firefox ) appears. The message \"Loading\" appears. The message disappears and that all. Nothig else appears. I see a blank page. I tried it with Chrome and IE but it shows the same behavior\r\nIts source code is\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width\">\r\n    <title>BlazorTest2</title>\r\n    <base href=\"/\" />\r\n    <link href=\"css/bootstrap/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <link href=\"css/site.css\" rel=\"stylesheet\" />\r\n</head>\r\n<body>\r\n    <app>Loading...</app>\r\n\r\n    <script src=\"_framework/blazor.js\" main=\"BlazorTest2.dll\" entrypoint=\"BlazorTest2.Program::Main\" references=\"Microsoft.AspNetCore.Blazor.Browser.dll,Microsoft.AspNetCore.Blazor.dll,Microsoft.Extensions.DependencyInjection.Abstractions.dll,Microsoft.Extensions.DependencyInjection.dll,mscorlib.dll,netstandard.dll,System.Core.dll,System.dll,System.Net.Http.dll\" linker-enabled=\"true\"></script>\r\n</body>\r\n</html>\r\nWhat is my fault? ( sorry about my bad english )","Url":"https://github.com/aspnet/Blazor/issues/900","RelatedDescription":"Closed issue \"No Content appears\" (#900)"},{"Id":"326625944","IsPullRequest":true,"CreatedAt":"2018-05-29T16:16:46","Actor":"Suchiman","Number":"886","RawContent":null,"Title":"Use RestoreAdditionalProjectSources instead of RestoreSources","State":"closed","Body":"`RestoreAdditionalProjectSources` is additive while `RestoreSources` replaces the existing sources, see https://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild#project-properties\r\n\r\nThe readme also specifies `https://dotnet.myget.org/F/dotnet-core/api/v3/index.json; ` which the templates do not, is that one really needed?","Url":"https://github.com/aspnet/Blazor/pull/886","RelatedDescription":"Closed or merged PR \"Use RestoreAdditionalProjectSources instead of RestoreSources\" (#886)"},{"Id":"326123231","IsPullRequest":true,"CreatedAt":"2018-05-29T16:14:13","Actor":"reaction1989","Number":"883","RawContent":null,"Title":"Use Angelsharp Nuget Package","State":"closed","Body":"Follow up of #459\r\n\r\n#458","Url":"https://github.com/aspnet/Blazor/pull/883","RelatedDescription":"Closed or merged PR \"Use Angelsharp Nuget Package\" (#883)"},{"Id":"327228958","IsPullRequest":false,"CreatedAt":"2018-05-29T09:23:10","Actor":"jorisvergeer","Number":"897","RawContent":null,"Title":"Anti virus software (Like Avast) blocks .dll downloads","State":"closed","Body":"I noticed on some Blazor demos (like https://blazor-context-menu-demo.azurewebsites.net) my AV software blocks some of the .dll files being downloaded. \r\n\r\nThis might become a annoying issue in the Blazor ecosystem when .dll downloads are generally being distrusted by AV software.\r\n","Url":"https://github.com/aspnet/Blazor/issues/897","RelatedDescription":"Closed issue \"Anti virus software (Like Avast) blocks .dll downloads\" (#897)"},{"Id":"326838558","IsPullRequest":false,"CreatedAt":"2018-05-29T08:44:09","Actor":"GoranHalvarsson","Number":"891","RawContent":null,"Title":"Dynamic routes?","State":"closed","Body":"Hello good people\r\n\r\nI have a request it's about routes(page directive). \r\nThe possibility to add routes(@page \"xxxx\") programmatically. \r\nSomething like this:\r\n@foreach (string item in navigationRepository.GetRelativeUrls())\r\n{\r\n    @page @item\r\n}\r\n\r\nWill this be possible?","Url":"https://github.com/aspnet/Blazor/issues/891","RelatedDescription":"Closed issue \"Dynamic routes?\" (#891)"},{"Id":"327018422","IsPullRequest":false,"CreatedAt":"2018-05-29T08:40:52","Actor":"Andrzej-W","Number":"892","RawContent":null,"Title":"What VS version for future Blazor releases?","State":"closed","Body":"Currently I have VS 2017 15.7.2 and 15.7.0 Preview 6. What will be needed for Blazor 0.4.0 and newer? Can I remove Preview 6 and work in 15.7.2 (now and **in the future**) or I should update 15.7.0 Preview to 15.8.0 Preview?","Url":"https://github.com/aspnet/Blazor/issues/892","RelatedDescription":"Closed issue \"What VS version for future Blazor releases?\" (#892)"},{"Id":"327121584","IsPullRequest":false,"CreatedAt":"2018-05-28T21:38:32","Actor":"masonwheeler","Number":"896","RawContent":null,"Title":"Missing type checking on component parameters","State":"open","Body":"When you put a `[Parameter]` on a component, and then invoke it with `<MyComponent param=@someValue>`, it doesn't do static type checking at compile-time to make sure that value will actually work.  All of the necessary information to do so is present, but no type-checking is done until runtime, when it attempts to set the parameter value through Reflection, making it possible for this to blow up with an `InvalidCastException`.\r\n\r\nThis should not be the case.","Url":"https://github.com/aspnet/Blazor/issues/896","RelatedDescription":"Open issue \"Missing type checking on component parameters\" (#896)"},{"Id":"327100601","IsPullRequest":false,"CreatedAt":"2018-05-28T19:13:57","Actor":"mrange","Number":"895","RawContent":null,"Title":"When unnesting tuples the wrong value is used.","State":"open","Body":"While writing on a formlet library I ran into a problem when unnesting tuples.\r\n\r\n## System\r\n\r\nBrowser: Microsoft Edge 42.17134.1.0\r\n\r\nI am using blazor 15.7.10274 and dotnet 2.1.0 RC. \r\n\r\n```\r\ndotnet --version\r\n2.1.300-rc1-008673\r\n```\r\n\r\nI tried upgrading the blazor references to `0.3.0` but I can't get Razor to work.\r\n\r\n## Repro\r\n\r\nI have the following code:\r\n\r\n```csharp\r\n  public static class ReproduceIt\r\n  {\r\n    public static Func<(T left, U right)> AndAlso<T, U>(this Func<T> t, Func<U> u)\r\n    {\r\n      return () => (t(), u());\r\n    }\r\n\r\n    public static U Map<T0, T1, T2, T3, U>(\r\n        Func<T0> t0,\r\n        Func<T1> t1,\r\n        Func<T2> t2,\r\n        Func<T3> t3,\r\n        Func<T0, T1, T2, T3, U> m)\r\n    {\r\n      var t = t0.AndAlso(t1).AndAlso(t2).AndAlso(t3);\r\n\r\n      var (((tv0, tv1), tv2), tv3) = t();\r\n\r\n      return m(tv0, tv1, tv2, tv3);\r\n    }\r\n\r\n    public static string TestStrings()\r\n    {\r\n      var r = Map(() => \"1\", () => \"2\", () => \"3\", () => \"4\", (x, y, z, w) => (x, y, z, w));\r\n      return r.ToString();\r\n    }\r\n\r\n    public static string TestInts()\r\n    {\r\n      var r = Map(() => 1, () => 2, () => 3, () => 4, (x, y, z, w) => (x, y, z, w));\r\n      return r.ToString();\r\n    }\r\n\r\n    public static string TestMixed()\r\n    {\r\n      var r = Map(() => \"1\", () => \"2\", () => 3, () => 4, (x, y, z, w) => (x, y, z, w));\r\n      return r.ToString();\r\n    }\r\n\r\n  }\r\n```\r\n\r\nIn .NET 4.7.1 and dotnet core the result from all Test functions are: `(1,2,3,4)` as expected.\r\n\r\nHowever when running the same code from blazor TestStrings and TestInts returns: `(1,2,1,4)`.\r\n\r\nTestMixed returns: `(1, 2, 25166320, 4)`\r\n\r\nThe decompiled IL looks fine:\r\n\r\n```csharp\r\n    public static U Map<T0, T1, T2, T3, U>(Func<T0> t0, Func<T1> t1, Func<T2> t2, Func<T3> t3, Func<T0, T1, T2, T3, U> m)\r\n    {\r\n      ValueTuple<ValueTuple<ValueTuple<T0, T1>, T2>, T3> valueTuple1 = t0.AndAlso<T0, T1>(t1).AndAlso<ValueTuple<T0, T1>, T2>(t2).AndAlso<ValueTuple<ValueTuple<T0, T1>, T2>, T3>(t3)();\r\n      ValueTuple<ValueTuple<T0, T1>, T2> valueTuple2 = valueTuple1.Item1;\r\n      ValueTuple<T0, T1> valueTuple3 = valueTuple2.Item1;\r\n      T0 obj1 = valueTuple3.Item1;\r\n      T1 obj2 = valueTuple3.Item2;\r\n      T2 obj3 = valueTuple2.Item2;\r\n      T3 obj4 = valueTuple1.Item2;\r\n      return m(obj1, obj2, obj3, obj4);\r\n    }\r\n```\r\n\r\nYet `obj3` doesn't get the right value.\r\n\r\n\r\nI tried adding some tracing:\r\n\r\n```csharp\r\n    public static U Map<T0, T1, T2, T3, U>(\r\n        Func<T0> t0,\r\n        Func<T1> t1,\r\n        Func<T2> t2,\r\n        Func<T3> t3,\r\n        Func<T0, T1, T2, T3, U> m)\r\n    {\r\n      var t = t0.AndAlso(t1).AndAlso(t2).AndAlso(t3);\r\n\r\n      var tr = t();\r\n\r\n      var (((tv0, tv1), tv2), tv3) = tr;\r\n\r\n      Console.WriteLine($\"TV2(unnested): {tv2}\");\r\n      Console.WriteLine($\"TV2(direct): {tr.left.right}\");\r\n\r\n      return m(tv0, tv1, tv2, tv3);\r\n    }\r\n```\r\n\r\nThis prints in the console:\r\n\r\n```\r\n WASM: TV2(unnested): 1\r\n WASM: TV2(direct): 3\r\n WASM: TV2(unnested): 25166320\r\n WASM: TV2(direct): 3\r\n```\r\n\r\nSo when navigating to the result directly it seems to work but not when unnesting.\r\n\r\nMy hope is that it's my blazor installation that is busted and no one else can reproduce this and it goes away by reinstalling blazor:)\r\n","Url":"https://github.com/aspnet/Blazor/issues/895","RelatedDescription":"Open issue \"When unnesting tuples the wrong value is used.\" (#895)"},{"Id":"327089899","IsPullRequest":false,"CreatedAt":"2018-05-28T18:04:00","Actor":"masonwheeler","Number":"894","RawContent":null,"Title":"Invalid route throws a silent exception","State":"open","Body":"Set up a page, and put the following at the top:\r\n\r\n`@page \"/ShouldWork/{ID: int}\"`\r\n\r\n(Note the space between the `:` and the `int`.)\r\n\r\nBuild and run.  Everything builds without error, but when attempting to run, after \"Loading...\" disappears, no content appears to replace it; you just end up with a blank browser window, and no error in the console.\r\n\r\nThe only way to figure out what's going wrong is putting a try-catch block around the `BrowserRenderer.AddComponent` invocation in Program.cs, and having it print the error to the console.  You end up with something like this:\r\n\r\n> WASM: BR ready MonoPlatform.ts:191:25\r\nWASM: System.ArgumentException: Unsupported constraint ' int' in route '/ShouldWork/{ID: int}'. MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.RouteConstraint.Parse (System.String template, System.String segment, System.String constraint) <0x1c42b88 + 0x0008c> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.TemplateSegment+<>c__DisplayClass0_0.<.ctor>b__0 (System.String token) <0x1c42450 + 0x0001c> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at System.Linq.Enumerable+SelectListPartitionIterator\\`2[TSource,TResult].ToArray () <0x1c41e90 + 0x00068> in <87b8d63555bf4cccb15cd79d953a359d>:0 MonoPlatform.ts:191:25\r\nWASM:   at System.Linq.Enumerable.ToArray[TSource] (System.Collections.Generic.IEnumerable\\`1[T] source) <0x1c41c20 + 0x0003c> in <87b8d63555bf4cccb15cd79d953a359d>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.TemplateSegment..ctor (System.String template, System.String segment, System.Boolean isParameter) <0x1c31db8 + 0x00102> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.TemplateParser.ParseTemplate (System.String template) <0x1c2f758 + 0x001ea> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.RouteTable.Create (System.Collections.Generic.IEnumerable\\`1[T] types) <0x1c0e7c8 + 0x0005a> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Routing.Router.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19dfd88 + 0x0003e> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1bde5d0 + 0x0007a> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x1bde440 + 0x00086> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x1bdde48 + 0x000bc> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x1bd8d68 + 0x0025e> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange\\`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange\\`1[T] newTree) <0x1bd87c8 + 0x000a2> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1bd3a88 + 0x000b4> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x1bd3630 + 0x00040> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x1bd2d88 + 0x00048> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1bd1e88 + 0x00068> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x1bd1b70 + 0x00036> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x1bd1a78 + 0x00048> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x1bc37b0 + 0x000b2> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1b9fa50 + 0x0005e> in <92ed9c6772a34798bccecc99cc26cbcd>:0 MonoPlatform.ts:191:25\r\nWASM:   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent[TComponent] (System.String domElementSelector) <0x1b9b698 + 0x00020> in <92ed9c6772a34798bccecc99cc26cbcd>:0 MonoPlatform.ts:191:25\r\nWASM:   at DungeonEpicSpa.Program+<>c+<<Main>b__0_0>d.MoveNext () <0x18e8038 + 0x001ce> in <66587a3e6a964a25bf7b20a708681e76>:0 MonoPlatform.ts:191:25\r\n\r\nThere are two problems here.  First, the URL parser apparently can't deal with whitespace, for no good reason.  And second, this failure causes an unhandled exception that doesn't get reported in the browser's console.  (Which means it's probably handled at some point, but not before it escapes the project code and unwinds into the Blazor framework, rendering everything useless.)","Url":"https://github.com/aspnet/Blazor/issues/894","RelatedDescription":"Open issue \"Invalid route throws a silent exception\" (#894)"},{"Id":"327062075","IsPullRequest":false,"CreatedAt":"2018-05-28T15:30:41","Actor":"rpedretti","Number":"893","RawContent":null,"Title":"InvalidOperationException when cancelling a HttpClient request","State":"open","Body":"Given some code like this\r\n\r\n```\r\ntry\r\n{\r\n    if (requestToken != null)\r\n    {\r\n        requestToken.Cancel();\r\n    }\r\n    \r\n    requestToken = new CancellationTokenSource();\r\n    var moviesResult = await _movieService.FindMoviesByPattern(SearchMovieTitle, page, requestToken.Token);\r\n    ...\r\n}\r\ncatch (OperationCanceledException)\r\n{\r\n    Console.WriteLine(\"Task cancelled\");\r\n}\r\n```\r\n```\r\npublic async Task<MovieSearchResult> FindMoviesByPattern(string pattern, int page, CancellationToken cancelationToken)\r\n{\r\n    var responseJson = await httpClient.GetAsync($\"{_baseUrl}&s={pattern}&page={page}\", cancelationToken);\r\n    var content = await responseJson.Content.ReadAsStringAsync();\r\n    var movies = JsonUtil.Deserialize<MovieSearchResult>(content);\r\n\r\n    return movies;\r\n}\r\n```\r\n\r\nIf ai call twice the function that cancel the token before the async task completes, after the console log I get an exception\r\n\r\n```\r\nMonoPlatform.ts:70 Uncaught (in promise) Error: System.InvalidOperationException\r\n  at System.Threading.Tasks.TaskCompletionSource`1[TResult].SetResult (TResult result) <0x1f1d830 + 0x0001c> in <97087b6ddfa745d994b6c273654c5fd6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler.ReceiveResponse (System.String id, System.String responseDescriptorJson, System.String responseBodyText, System.String errorText) <0x1ef7f70 + 0x000d4> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at System.Threading.Tasks.TaskCompletionSource`1[TResult].SetResult (TResult result) <0x1f1d830 + 0x0001c> in <97087b6ddfa745d994b6c273654c5fd6>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler.ReceiveResponse (System.String id, System.String responseDescriptorJson, System.String responseBodyText, System.String errorText) <0x1ef7f70 + 0x000d4> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n    at Object.callMethod (MonoPlatform.ts:70)\r\n    at dispatchResponse (Http.ts:71)\r\n    at dispatchSuccessResponse (Http.ts:44)\r\n    at Http.ts:32\r\n    at step (LogicalElements.ts:161)\r\n    at Object.next (LogicalElements.ts:161)\r\n    at fulfilled (LogicalElements.ts:161)\r\n```\r\n\r\nIt can be reproduced at my project: https://github.com/rpedretti/BlazorApp/tree/version_0_3_0 at the Movies menu, on a paged grid","Url":"https://github.com/aspnet/Blazor/issues/893","RelatedDescription":"Open issue \"InvalidOperationException when cancelling a HttpClient request\" (#893)"},{"Id":"326814594","IsPullRequest":false,"CreatedAt":"2018-05-27T17:21:56","Actor":"TFTomSun","Number":"890","RawContent":null,"Title":"RestSharp not working","State":"closed","Body":"I tried to use restsharp for a simple rest request against the soundcloud rest api.\r\n\r\nWhen I add the following code:\r\n```csharp\r\n            WebRequest.DefaultWebProxy = null;\r\n            var client = new RestClient(\"https://api.soundcloud.com/\");\r\n            var request = new RestRequest(\"tracks/13158665\");\r\n            request.AddQueryParameter(\"client_id\", \"****\");\r\n\r\n            var response = await client.ExecuteTaskAsync<string>(request);\r\n            this.Response =  $\"{response.StatusCode} {response.ErrorMessage} {response.Content}\";\r\n```\r\n\r\ni get as response:\r\n\r\n> 0 libc\r\n\r\nwhen I execute inside a .net core test project i get:\r\n\r\n> Unauthorized  \r\n\r\nWith a valid client id i get a full json response containing the track information in the .net core test. The result in blazor is always the same. Is there a list of not supported functionality? And how can I use 3rd Party API's if the build don't tell me whether they contain such not supported functionality?\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/890","RelatedDescription":"Closed issue \"RestSharp not working\" (#890)"},{"Id":"326769142","IsPullRequest":false,"CreatedAt":"2018-05-27T17:21:04","Actor":"ikondrasovas","Number":"888","RawContent":null,"Title":"Inline SVG element not adjusting to available width","State":"closed","Body":"The following inline SVG element is properly rendered into a regular bootstrap page:\r\n\r\n`\r\n<svg viewBox=\"0 0 3000 1500\" preserveAspectRatio=\"xMidYMin slice\"  style=\"width: 100%; padding-bottom:calc(50%); height: 1px; overflow: visible\">\r\n<rect width=\"3000\" height=\"1500\" />\r\n<line x1=\"0\" y1=\"0\" x2=\"3000\" y2=\"1500\" style=\"stroke:rgb(255,0,0);stroke-width:2\" />\r\n</svg>\r\n`\r\n\r\nHowever, when used into my Blazor project, the svg width is not properly adjusted to the available width.\r\n\r\nThere are some [necessary workarounds](https://css-tricks.com/scale-svg/) to make this width adjustment works in most  browsers and they usually work, but not with my Blazor project.\r\n\r\nIs this something known that is related to Blazor? What should I do?\r\n\r\nThank you,","Url":"https://github.com/aspnet/Blazor/issues/888","RelatedDescription":"Closed issue \"Inline SVG element not adjusting to available width\" (#888)"},{"Id":"326797396","IsPullRequest":false,"CreatedAt":"2018-05-27T08:15:39","Actor":"mahdi-ninja","Number":"889","RawContent":null,"Title":"Call unregistered JavaScript functions","State":"open","Body":"I know that Blazor currently uses a registered function approach, but I'm not sure why exactly this is required. I think It'd be nice if we could call arbitrary JavaScript functions without having to register them first. \r\n\r\nI have implemented a simple workaround for this. Please take a look and let me know if this something that you may want to implement (of course in a proper way) in Blazor. If not, can you please tell me why it's a bad idea and is there any reason for me not to use this approach?\r\n\r\nIn my implementation, I have a C# helper method called `JavaScriptInterop.Invoke` which can be used like this:\r\n```csharp\r\n// Call console.log without registering it\r\n// JS call: console.log({\"str\": \"Hello\", \"f\": 1.23, \"b\": false});\r\n// returns null\r\nJavaScriptInterop.Invoke<object>(\"console.log\", new { str = \"Hello\", f = 1.23, b = false });\r\n\r\n// Method with variable number of params\r\n// JS call: Math.max(3, 4.3, 5.1);\r\n// returns 5.1\r\nJavaScriptInterop.Invoke<double>(\"Math.max\", 3, 4.3, 5.1);\r\n\r\n// Access properties (doesn't have to be method call)\r\n// JS call: Math.PI\r\n// returns: 3.141592653589793\r\nJavaScriptInterop.Invoke<double>(\"Math.PI\");\r\n\r\n// Invalid reference\r\n// JS call: doesn't call anything\r\n// returns null\r\nJavaScriptInterop.Invoke<object>(\"invalid.ref\");\r\n```\r\n\r\nAnd here's how I implemented it\r\n* Helper method `JavaScriptInterop.Invoke` to call registered JS function `invokeUnregistered`\r\n```csharp\r\npublic static class JavaScriptInterop\r\n{\r\n    public static TRes Invoke<TRes>(string identifier, params object[] args)\r\n    {\r\n        return RegisteredFunction.Invoke<TRes>(\"invokeUnregistered\", new { identifier, args });\r\n    }\r\n}\r\n```\r\n* Registering a generic JS function invoker `invokeUnregistered`\r\n```html\r\n<script type=\"blazor-boot\"></script>\r\n<script>\r\n    Blazor.registerFunction('invokeUnregistered', data => {\r\n        var ref = data.identifier\r\n            .split('.')\r\n            .reduce((prev, curr) => prev && prev[curr], window);\r\n        return ref instanceof Function ?\r\n            ref.apply(null, data.args) :\r\n            ref;\r\n    });\r\n</script>\r\n```\r\n\r\n\r\nPS: This could also be implemented as a dynamic class, so that the call will look something like this:\r\n```csharp\r\n//this will be translated to JavaScriptInterop.Invoke<double>(\"Math.max\", 1, 2, 3);\r\nvar max = JavaScript.Math.max(1, 2, 3).As<double>();\r\n```","Url":"https://github.com/aspnet/Blazor/issues/889","RelatedDescription":"Open issue \"Call unregistered JavaScript functions\" (#889)"},{"Id":"326599387","IsPullRequest":false,"CreatedAt":"2018-05-25T17:03:16","Actor":"shumas","Number":"885","RawContent":null,"Title":"string constant for @page directive","State":"open","Body":"Hi!\r\nLooks logical (and useful), if it'll be possible to use const strings in page directive- as it compiles to the route attribute (where you can use constants).","Url":"https://github.com/aspnet/Blazor/issues/885","RelatedDescription":"Open issue \"string constant for @page directive\" (#885)"},{"Id":"326148969","IsPullRequest":true,"CreatedAt":"2018-05-24T14:55:03","Actor":"SteveSandersonMS","Number":"884","RawContent":null,"Title":"Update to Mono c06c9b78c10. Fixes #831","State":"closed","Body":"Have also added notes about how to do these Mono upgrades and refactored our `driver.c` customizations to make future upgrades a bit simpler.\r\n\r\nIf you read the diff, it might look like I've made a lot of changes to the `.c` code. But I haven't really made any functional changes. The diffs are due to:\r\n\r\n * Mono changing things in their `driver.c` drop\r\n * Me factoring out our customizations into a new file, `driver_blazor.c`. But it's exactly the same code (except for changing a couple of function names to avoid clashes with the Mono originals).","Url":"https://github.com/aspnet/Blazor/pull/884","RelatedDescription":"Closed or merged PR \"Update to Mono c06c9b78c10. Fixes #831\" (#884)"},{"Id":"326027236","IsPullRequest":false,"CreatedAt":"2018-05-24T12:02:59","Actor":"markcdev","Number":"882","RawContent":null,"Title":"Unable to run standard templates","State":"closed","Body":"I followed the steps as per the documentation [here ](https://marketplace.visualstudio.com/items?itemName=aspnet.blazor) but when I run a newly created example I just get a blank screen. \r\n\r\nVersions - \r\n\r\nVisual Studio Community Edition 2017 - Version 15.7.2\r\nASP.NET Core - Version 2.1.3-preview1-008174\r\nASP.NET Core Blazor Language Services - Version 0.3.0\r\n\r\nSteps to recreate - \r\n\r\n1. Open Visual Studio\r\n2. File -> New Project -> ASP.NET Core Web Application\r\n3. Select the Blazor Template\r\n4. Build/Run the project\r\n\r\nOutput - \r\n\r\n![image](https://user-images.githubusercontent.com/10827223/40475373-5a59fa06-5f39-11e8-9455-b771c3223b1c.png)\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/882","RelatedDescription":"Closed issue \"Unable to run standard templates\" (#882)"},{"Id":"326025366","IsPullRequest":false,"CreatedAt":"2018-05-24T08:58:04","Actor":"Nymeria25","Number":"881","RawContent":null,"Title":"netstandard1.4 compatibility","State":"closed","Body":"Hi,\r\n\r\nIs Blazor compatible with netstandard1.4 at all?\r\n\r\nKindest regards.","Url":"https://github.com/aspnet/Blazor/issues/881","RelatedDescription":"Closed issue \"netstandard1.4 compatibility\" (#881)"},{"Id":"325706770","IsPullRequest":true,"CreatedAt":"2018-05-24T08:54:44","Actor":"SteveSandersonMS","Number":"878","RawContent":null,"Title":"Clean up use of relative URLs. Fixes #844 and #845","State":"closed","Body":"Previously we were handling relative URLs in various inconsistent ways. Sometimes they were assumed to start with slashes, and other times they were assumed not to do so. Likewise, APIs that were meant to match or return relative URLs did inconsistent things.\r\n\r\nIn this PR I've done a pass through (hopefully) everything that is or handles relative URLs, standardizing on a consistent pattern that:\r\n\r\n * Base URLs always have a trailing slash (just like a `<base href>` value must do, if it's going to behave as people expect)\r\n * Base-relative URLs do not have a leading slash (because if they did, they are root-relative not base-relative)\r\n\r\nThere are still a couple of edge cases:\r\n\r\n * If your site has the base href `/somedir/`, we want anyone visiting `http://yoursite/somedir` to be treated the same as if they were visiting `http://yoursite/somedir/` (i.e., so the same page would be selected and the same nav links would be highlighted). That's because devs often don't have control over the webserver config and might not be able to enforce the trailing slash as canonical.\r\n * With the `@page` directive, people will still typically give values with leading-slashes (e.g., `@page \"/\"`, not `@page \"\"`). We ignore the presence or absence of a leading slash there, because it could never have any meaning, and because people will find it hard to understand what an empty string value would mean.\r\n\r\nAltogether this fixes #844 and #845, plus is just more consistent internally.\r\n\r\n@rynowak @javiercn I'm adding you for review, but I know the contents here won't be hugely interesting as it has limited overlap with your areas. Totally fine if you want to ignore this - I'll just merge it tomorrow unless anyone raises specific concerns.","Url":"https://github.com/aspnet/Blazor/pull/878","RelatedDescription":"Closed or merged PR \"Clean up use of relative URLs. Fixes #844 and #845\" (#878)"},{"Id":"325880897","IsPullRequest":true,"CreatedAt":"2018-05-23T21:31:03","Actor":"javiercn","Number":"880","RawContent":null,"Title":"[WIP] Interop","State":"open","Body":"## Goals\r\n* Introduces improved interop from calling .NET methods from JavaScript\r\n* Introduces support for calling asynchronous methods from JavaScript\r\n* Introduces support for calling asynchronous JavaScript functions from .NET\r\n## Remaining points\r\n- [x] API cleanup.\r\n- [x] Protocol/Implementation cleanup.\r\n- [x] Exception handling.\r\n- [ ] More unit tests.","Url":"https://github.com/aspnet/Blazor/pull/880","RelatedDescription":"Open PR \"[WIP] Interop\" (#880)"},{"Id":"325829226","IsPullRequest":false,"CreatedAt":"2018-05-23T19:13:59","Actor":"sadqiang","Number":"879","RawContent":null,"Title":"Does Blazor support Roslyn Microsoft.CodeAnalysis.CSharp.Scripting? ","State":"closed","Body":"I love creating applications with code generated on the fly by Roslyn. For example, I can evaluate mathematical expression on the fly without having to rolling my own parser.\r\n\r\n[Scripting API Samples with Roslyn](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) shows some examples how to evaluate mathematical expression on the fly.\r\n\r\nSo my question is:\r\n\r\n> Does Blazor support Roslyn to evaluate mathematical expression on the fly?","Url":"https://github.com/aspnet/Blazor/issues/879","RelatedDescription":"Closed issue \"Does Blazor support Roslyn Microsoft.CodeAnalysis.CSharp.Scripting? \" (#879)"},{"Id":"325659759","IsPullRequest":false,"CreatedAt":"2018-05-23T11:16:38","Actor":"ncarandini","Number":"877","RawContent":null,"Title":"CLI Template 1.0 from Blazor developer feed older than version 0.3.0 from NuGet feed?","State":"open","Body":"Hi, I've found that having an active NuGet source pointing to the Blazor developer feed (`https://dotnet.myget.org/F/blazor-dev/api/v3/index.json`) and executing `dotnet new -i Microsoft.AspNetCore.Blazor.Templates` install a `1.0 version template` that seems to be older that the template version 0.3.0 installed from the default NuGet source (https://api.nuget.org/v3/index.json).\r\n\r\nI know that adding the Blazor developer feed (`https://dotnet.myget.org/F/blazor-dev/api/v3/index.json` ) to the NuGet source list isn't necessary anymore now that it's included in the `RestoreSources` section of the project file, but having it shouldn't produce weird effects.\r\n\r\nMaybe is better to remove the CLI Template version \"1.0\" from the Blazor developer feed, because the 0.3.0 version of the CLI template found in the official NuGet feed seems newer than the 1.0 one found in the  Blazor developer feed.\r\n\r\n### Step to reproduce:\r\n1. Add the NuGet source from VS:\r\n![image](https://user-images.githubusercontent.com/139274/40420513-f40b70a0-5e88-11e8-98c7-eafc1b603c14.png)\r\n2. Open a command window and execute `dotnet new -i Microsoft.AspNetCore.Blazor.Templates`\r\n3. Check the `%userprofile%\\.templateengine\\dotnetcli\\v2.1.300-rc1-008673\\packages` folder, and verify that there is a file named `microsoft.aspnetcore.blazor.templates.1.0.0.nupkg` .\r\n4. Create from CLI a new Blazor app with `dotnet new blazor` command.\r\n5. Open the .csproj file and you'll find that the packages referenced are the 0.2.0 ones:\r\n![image](https://user-images.githubusercontent.com/139274/40420785-bc94b612-5e89-11e8-8582-ec33133a917f.png)\r\n6. Compare with a new Blazor app created with the latest \"official\" template version 0.3.0 where the packages referenced are the 0.3.0","Url":"https://github.com/aspnet/Blazor/issues/877","RelatedDescription":"Open issue \"CLI Template 1.0 from Blazor developer feed older than version 0.3.0 from NuGet feed?\" (#877)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-31T05:30:02.7880575Z","RunDurationInMilliseconds":1373}