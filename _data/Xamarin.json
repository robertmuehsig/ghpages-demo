{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null},{"Title":"Update Your Xamarin.Mac Apps for 64-bit Today!","PublishedOn":"2018-05-14T18:33:45+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last June, Apple announced that upcoming macOS releases would only support 32-bit applications “with compromises”. If your Mac application is not 64-bit, we strongly recommend taking action to avoid...","Href":"https://blog.xamarin.com/update-xamarinmac-apps/","RawContent":null},{"Title":"Podcast: Build 2018 Recap for Mobile Developers","PublishedOn":"2018-05-11T18:38:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the news for mobile developers from Build 2018, including Xamarin.Forms 3.0, Hyper-V support for the Android emulator,...","Href":"https://blog.xamarin.com/podcast-build-2018-recap-mobile-developers/","RawContent":null},{"Title":"All Things Xamarin at Build 2018","PublishedOn":"2018-05-09T15:07:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Build 2018 has finally arrived which means exciting news for developers about Microsoft products and technologies, including Xamarin. For those following along at home, we’ve rounded up all...","Href":"https://blog.xamarin.com/xamarin-build-2018/","RawContent":null},{"Title":"Try the Latest Release of Xamarin.Forms 3.0!","PublishedOn":"2018-05-07T19:05:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are overjoyed to bring you our latest stable release of Xamarin.Forms, version 3.0. This is our fastest, richest release to date coupled with fantastic improvements up and down the Xamarin stack...","Href":"https://blog.xamarin.com/xamarin-forms-3-0-released/","RawContent":null},{"Title":"Mobile Development at Microsoft Build 2018","PublishedOn":"2018-05-04T22:03:54+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s almost time for Microsoft Build 2018 in Seattle, Washington and that means a full three days of keynotes, breakout and theater sessions, workshops, and all the latest updates to your...","Href":"https://blog.xamarin.com/mobile-development-microsoft-build-2018/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7754138941","Type":"IssuesEvent","CreatedAt":"2018-05-31T05:03:42","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1759","RelatedDescription":"Opened issue \"xamarin-android uses out-of-sync API generator from java.interop\" (#1759) at xamarin/xamarin-android","RelatedBody":"There is a big problem in xamarin-android API (Mono.Android) now. https://github.com/xamarin/xamarin-android/pull/1728 should have never been merged without merging https://github.com/xamarin/java.interop/pull/325#issuecomment-391814911 .\r\n\r\nNext time API generation will be simply impossible."},{"Id":"7753377841","Type":"PullRequestEvent","CreatedAt":"2018-05-31T00:16:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1753","RelatedDescription":"Merged pull request \"[aapt2] _CreateAapt2VersionCache target should not run when aapt2 is disabled\" (#1753) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1748\r\n\r\nI was testing build times on master with a project in the\r\nXamarin.Forms repo.\r\n\r\nI discovered the following scenario:\r\n1. Build [Xamarin.Forms.ControlGallery.Android.csproj](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.ControlGallery.Android/Xamarin.Forms.ControlGallery.Android.csproj)\r\n2. Build it again, with no changes\r\n\r\nThe `_CreateAapt2VersionCache` target was always running, and it seems\r\nto be a bit of a performance regression.\r\n\r\nFor example, in the log from building this project I saw the following\r\ntimes from `_CreateAapt2VersionCache` in this project and other referenced\r\nprojects:\r\n- 144ms\r\n- 51ms\r\n- 92ms\r\n- 127ms\r\n- 102ms\r\n\r\nTotal of 516ms added to a build with no changes.\r\n\r\nTo fix this I:\r\n- Added a test with `$(AndroidUseAapt2)` set to `False`, verifying\r\n  `Aapt2Link` and `_CreateAapt2VersionCache` are skipped.\r\n- Added a `Condition` so that `_CreateAapt2VersionCache` doesn't run\r\n  if aapt2 is disabled"},{"Id":"7753377835","Type":"IssuesEvent","CreatedAt":"2018-05-31T00:16:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1748","RelatedDescription":"Closed issue \"_CreateAapt2VersionCache target always runs on master\" (#1748) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build [Xamarin.Forms.ControlGallery.Android.csproj](https://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.ControlGallery.Android/Xamarin.Forms.ControlGallery.Android.csproj)\r\n2. Build it again, with no changes\r\n\r\nThe `_CreateAapt2VersionCache` target is always running, and it seems to be a bit of a performance regression.\r\n\r\nFor example, in the log from building this project I see the following times from this project and other referenced projects:\r\n- 144ms\r\n- 51ms\r\n- 92ms\r\n- 127ms\r\n- 102ms\r\n\r\nTotal of 516ms added to a build with no changes.\r\n\r\n### Expected Behavior\r\n\r\n`_CreateAapt2VersionCache` runs even though Aapt2 is disabled by default via `$(AndroidUseAapt2)` set to `False`\r\n\r\n### Actual Behavior\r\n\r\n`_CreateAapt2VersionCache` always runs.\r\n\r\n### Version Information\r\n\r\nMy local build is at commit: d8fdbcfc16f7d6e22098fa03101c487d9a853575\n\n> VS bug [#624025](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/624025)"},{"Id":"7753090225","Type":"PullRequestEvent","CreatedAt":"2018-05-30T22:43:34","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1758","RelatedDescription":"Opened pull request \"[aapt2] fix $(AndroidUseAapt2), missing aapt2 is now an error\" (#1758) at xamarin/xamarin-android","RelatedBody":"We have `$(AndroidUseAapt2)` defaulted to `False` so that developers\r\nhave to opt-in to using the new feature. Unfortunately, enabling the\r\nproperty did not work at all.\r\n\r\nThere was a typo in the `<ResolveSdksTask />` invocation:\r\n\r\n    AndroidUseAapt2=\"$(Aapt2Version)\"\r\n\r\nAdditionally, the `Aapt2Version` property wasn't being passed in either.\r\n\r\nI also promoted the following warnings to errors:\r\n- XA0111 - unknown aapt2 version\r\n- XA0112 - aapt2 is missing\r\n\r\nSo if I rename `aapt2.exe`, the following command:\r\n\r\n    bin\\Debug\\bin\\xabuild samples\\HelloWorld\\HelloWorld.csproj /p:AndroidUseAapt2=True\r\n\r\nResults with the error:\r\n\r\n    error XA0112: `aapt2` is not installed. Please check it is installed correctly."},{"Id":"7752880337","Type":"PullRequestEvent","CreatedAt":"2018-05-30T21:48:56","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1757","RelatedDescription":"Opened pull request \"[build] fix Java.Interop's Mono.Cecil usage on Windows\" (#1757) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/commit/9bc51aed62d6e00035496dc3c6a76fb303a5fa90#diff-b67911656ef5d18c4ae36cb6741b7965R114\r\n\r\nJava.Interop was recently configured to use Mono's copy of\r\n`Mono.Cecil`. This change was setup in the `Makefile`:\r\n\r\n    prepare-props: prepare-deps\r\n        cp $(call GetPath,JavaInterop)/external/Mono.Cecil* \"$(call GetPath,MonoSource)/external\"\r\n        cp \"$(call GetPath,JavaInterop)/product.snk\" \"$(call GetPath,MonoSource)\"\r\n\r\nWe have to run the equivalent of these `cp` commands in\r\n`PrepareWindows.targets`.\r\n\r\nUnfortunately there is still currently further issues with the Windows\r\nbuild, due to a mishap with the downloaded mono bundle."},{"Id":"7752751727","Type":"IssuesEvent","CreatedAt":"2018-05-30T21:19:49","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1756","RelatedDescription":"Opened issue \"Stop using JNIEnv.Call*Method()\" (#1756) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run a Xamarin.Android within Profiler and look at the allocations.\r\n2. Notice that many `JniMethodInfo` instances are being allocated -- many thousands, depending on project setup.\r\n3. Cry at all the allocations.\r\n\r\nThe cause of the allocations is that `Android.Runtime.JNIEnv` is now largely a \"legacy\" API, superseded by Java.Interop. In order to avoid JNIEnv binding duplication, most of the `JNIEnv` methods were updated to delegate to `Java.Interop`:\r\n\r\n```csharp\r\npublic static unsafe IntPtr CallObjectMethod (IntPtr jobject, IntPtr jmethod)\r\n{\r\n\treturn JniEnvironment.InstanceMethods.CallObjectMethod (new JniObjectReference (jobject), new JniMethodInfo (jmethod, isStatic: false)).Handle;\r\n}\r\n```\r\n\r\nFor any code using the legacy API, this can be expensive on the GC.\r\n\r\nWhat we should do:\r\n\r\n1. Audit the xamarin-android codebase to ensure we're not using `JNIEnv.Call*Method()` within our own codebase.\r\n2. *Strongly suggest* that all Java Library Binding projects set [`$(AndroidCodegenTarget)`](https://github.com/xamarin/xamarin-android/blob/master/Documentation/guides/BuildProcess.md)=XAJavaInterop1."},{"Id":"7752641551","Type":"IssuesEvent","CreatedAt":"2018-05-30T20:56:55","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1556","RelatedDescription":"Closed issue \"Re-installation attempts after upgrading result in app startup failure with fastdev enabled\" (#1556) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nSet up a side by side installation if on windows, or download multiple XA versions on macOS. Using the first major version of XA (say 15.6.x):\r\n1. `msbuild /t:Install *.csproj`\r\n2. Launch the application\r\n\r\nAt this point the app should launch successfully. Now switch XA versions and execute the same commands on the \"unclean\" project:\r\n\r\n3. `msbuild /t:Install *.csproj`\r\n4. Launch the application\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nMy app starts up without any issues after upgrading XA and re-installing an already built version of it.\r\n\r\n### Actual Behavior\r\nI do not believe this is a regression, however an unchanged debug attempt after upgrading XA versions results in a failure to find `libmonosgen-2.0.so`:\r\n\r\n```\r\n04-13 14:22:50.707  7225  7225 W monodroid: Creating public update directory: `/data/user/0/KitKat.KitKat/files/.__override__`\r\n04-13 14:22:50.707  7225  7225 W monodroid: Using override path: /data/user/0/KitKat.KitKat/files/.__override__\r\n04-13 14:22:50.707  7225  7225 W monodroid: Using override path: /storage/emulated/0/Android/data/KitKat.KitKat/files/.__override__\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /data/user/0/KitKat.KitKat/files/.__override__/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /storage/emulated/0/Android/data/KitKat.KitKat/files/.__override__/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /storage/emulated/0/../legacy/Android/data/KitKat.KitKat/files/.__override__/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /data/app/KitKat.KitKat-px2plmRPMPy-nUK-DN870A==/lib/arm64/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /data/user/0/KitKat.KitKat/files/.__override__/links/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 W monodroid: Trying to load sgen from: /system/lib/libmonosgen-2.0.so\r\n04-13 14:22:50.707  7225  7225 F monodroid: cannot find libmonosgen-2.0.so in override_dir: /data/user/0/KitKat.KitKat/files/.__override__, app_libdir: /data/app/KitKat.KitKat-px2plmRPMPy-nUK-DN870A==/lib/arm64 nor in previously printed locations.\r\n04-13 14:22:50.707  7225  7225 F monodroid: Do you have a shared runtime build of your app with AndroidManifest.xml android:minSdkVersion < 10 while running on a 64-bit Android 5.0 target? This combination is not supported.\r\n04-13 14:22:50.707  7225  7225 F monodroid: Please either set android:minSdkVersion >= 10 or use a build without the shared runtime (like default Release configuration).\r\n04-13 14:22:50.720  1136  2492 I ActivityManager: Process KitKat.KitKat (pid 7225) has died: fore TOP\r\n```\r\n\r\n### Version Information\r\nPixel 2 v8.1\r\nhttps://gist.github.com/pjcollins/8a140c4ede58ba95de59406f0de0067a\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nInitial build:  https://gist.github.com/pjcollins/1b6ac8601251c500de3baf79d5fd275b\r\nUpgrade build: https://gist.github.com/pjcollins/c2117de60876a2bfde48b14dbbd6ac35\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7752432584","Type":"PullRequestEvent","CreatedAt":"2018-05-30T20:16:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1745","RelatedDescription":"Merged pull request \"[linker] Added PreserveJniMarshalMethods option\" (#1745) at xamarin/xamarin-android","RelatedBody":"This option makes preserving new marshal methods, generated by\r\n`jnimarshalmethod-gen.exe`, optional in the linker.\r\n\r\nIt also introduces new `JniMarshalMethods` property to toggle building\r\nwith generated marshal methods and will be used by following\r\npatches too. It defaults to *False*."},{"Id":"7752152925","Type":"PullRequestEvent","CreatedAt":"2018-05-30T19:21:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1728","RelatedDescription":"Merged pull request \"Update API description and Android SDK components for P preview 3.\" (#1728) at xamarin/xamarin-android","RelatedBody":"The API updates are regeneration from the xamarin-android-docimporter-ng\r\ntool fixes."},{"Id":"7751969382","Type":"IssuesEvent","CreatedAt":"2018-05-30T18:45:52","Actor":"Raj123456788","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1755","RelatedDescription":"Opened issue \"Xamarin AAR library COMPILETODALVIK error on build\" (#1755) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Using Latest Visual studio@ JDK 1.8 installed.Below is the error The Bindings project does build. but android project does not. 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: default or static interface method used without --min-sdk-version >= 24 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: default or static interface method used without --min-sdk-version >= 24 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: default or static interface method used without --min-sdk-version >= 24 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2>COMPILETODALVIK : Uncaught translation error : com.android.dx.cf.code.SimException: invalid opcode ba (invokedynamic requires --min-sdk-version >= 26) 2> java.lang.RuntimeException: Translation has been interrupted 2> at com.android.dx.command.dexer.Main.processAllFiles(Main.java:615) 2> at com.android.dx.command.dexer.Main.runMonoDex(Main.java:313) 2> at com.android.dx.command.dexer.Main.runDx(Main.java:291) 2> at com.android.dx.command.dexer.Main.main(Main.java:247) 2> at com.android.dx.command.Main.main(Main.java:94) 2> Caused by: java.lang.InterruptedException: Too many errors 2> at com.android.dx.command.dexer.Main.processAllFiles(Main.java:607) 2> ... 4 more 2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2188,3): error : java.lang.RuntimeException : Translation has been interrupted\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nShould Build\r\n\r\n### Actual Behavior\r\nabove error\r\n### Version Information\r\nXamarin 4.10.0.448\r\n"},{"Id":"7751801901","Type":"PullRequestEvent","CreatedAt":"2018-05-30T18:14:15","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1754","RelatedDescription":"Opened pull request \"[Linux] Fix a few problems with host build of libmonodroid\" (#1754) at xamarin/xamarin-android","RelatedBody":"We've been building libmonodroid for Linux host incorrectly. While the shared\r\nlibrary built, it would never load properly, failing to resolve the\r\n`pthread_threadid_np` and `print_ifla_name` functions.\r\n\r\nThe former is due the fact that we attempted to implement the `gettid`\r\nfunction (returns current thread ID) which does not exist in glibc on Linux and\r\nour implementation called `pthread_threadid_np` which caused a compiler warning\r\nabout missing declaration of the function - an error which would show up only at\r\nruntime (but we practically don't use the Linux host libmonodroid currently and\r\nso nobody noticed the issue). This commit fixes the implementation by calling\r\nthe `SYS_gettid` system call directly on Linux (but not on Android which has its\r\nown implementation of the call in bionic)\r\n\r\nThe latter was due to missing `#ifdef DEBUG` around the call to the function\r\nwhich is present only if `DEBUG` is defined."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7754017840","Type":"PullRequestEvent","CreatedAt":"2018-05-31T04:14:23","Actor":"rookiejava","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2878","RelatedDescription":"Opened pull request \"[Tizen] Remove legacy tizen specific available condition\" (#2878) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemove unnecessary property for checking whether tizen specific is available or not. Since Xamarin.Forms 3.0 (support tizen backend) this is no longer necessary.\r\n\r\n### Bugs Fixed ###\r\n\r\nNone\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [X] Rebased on top of the target branch at time of PR\r\n- [X] Changes adhere to coding standard\r\n- [X] Consolidate commits as makes sense\r\n"},{"Id":"7753815210","Type":"IssuesEvent","CreatedAt":"2018-05-31T02:56:25","Actor":"OneVideo","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2877","RelatedDescription":"Opened issue \"System.IO.File.GetCreationTime and .GetLastWriteTime Returning 0\" (#2877) at xamarin/Xamarin.Forms","RelatedBody":"C# calls to System.IO.File.GetCreationTime and .GetLastWriteTime (for each of the local and UTC method forms) return 0 on Android target runtimes when the filename includes a period ('.') character in addition to the one delimiting the extension.  \r\n   * Use of the character is permitted in Android filenames\r\n   * Not using the character in the filename is a mitigation, as the functions return proper datetimes \r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a file in LocalApplicationData directory.  Name it simply. e.g., Foobar.mp4\r\n    In a Xamarin Forms project, code:     string sFn = \"Foobar.mp4\";\r\n2. Use System.IO.File methods to observe the file creation datetime and modified, e.g.,\r\n    string sFQFn = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData), sFn);\r\n    DateTime dtThisCopy = File.GetCreationTimeUtc(sFQFn );\r\n    DateTime dtLastWrite = File.GetLastWriteTimeUtc(sFQFn );\r\n\r\n3. Change the code so that sFn = \"Foo.bar.mp4\" and rename the referred to file, then repeat Step 2\r\n\r\n### Expected Behavior\r\nThe DateTime values returned for \"Foo.bar.mp4\" and \"Foobar.mp4\" should be identical.\r\n### Actual Behavior\r\nReturn values are DateTime equivalents of 0\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7753146983","Type":"PullRequestEvent","CreatedAt":"2018-05-30T23:00:11","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2876","RelatedDescription":"Opened pull request \"[UWP,iOS] Enable screen readers to read non-interactive elements\" (#2876) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nWe expect screen readers to be able to read content by default. On iOS and UWP, this was not true for non-interactive elements such as Labels.\r\n\r\n#### iOS\r\nWe create iOS views programmatically, in which case the `IsAccessibilityElement` value defaults to `false`. We expected it to default to `true`, as it states in the documentation, but this apparently is only the case when using storyboards. We are now explicitly setting `IsAccessibilityElement` to true for all controls.\r\n\r\n#### UWP\r\nThis functionality was originally working, but it was thwarted by a change made later for UI testing. Reverting that change for now until we can find a better alternative.\r\n\r\n### Bugs Fixed ###\r\n\r\n- fixes #1946\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\n- UWP UI Tests will probably fail\r\n- Anyone explicitly setting `UIView.IsAccessibilityElement` to `false` in custom renderers should ensure they do so after `SetNativeControl` is called. Otherwise, it will be overridden to `true`.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"7753061663","Type":"IssuesEvent","CreatedAt":"2018-05-30T22:35:27","Actor":"SlaKul","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2875","RelatedDescription":"Opened issue \"[macOS] ScrollViewRenderer.PackContent is not called when ScrollView.Content is set after same delay\" (#2875) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nScrollViewRenderer.PackContent is used to configure the content of ScrollView on macOS, but it is not called when ScrollView.Content is set after same delay.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Show a Page with ScrollView without setting the content\r\n2. Wait a while in a code (f.e. await Task.Delay)\r\n3. Set Content of the shown ScrollView to any View\r\n\r\n### Expected Behavior\r\n\r\nThe Content added after a while should be shown.\r\n\r\n### Actual Behavior\r\n\r\nNothing happens.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.0.482510\r\n- Last known good version: -\r\n- IDE: Visual Studio for Mac\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - macOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->"},{"Id":"7752289339","Type":"IssuesEvent","CreatedAt":"2018-05-30T19:48:31","Actor":"wescur88","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2874","RelatedDescription":"Opened issue \"Media.xcassets not in Resources in iOS project\" (#2874) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nMedia.xcassets not in Resources in iOS project, when creating AssetCatalogs from default Info.plist editor.  Media.xcassets is created in the project folder instead in VS2017 version 15.6.6. The Info.plist editor creates the XSAppIconAssets key with this string value: Resources/Media.xcassets/AppIcons.appiconset.\r\nThis causes invalid binary validation from ItunesConnect.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create iOS project.\r\n2. Add AssetCatalogs and add all images.\r\n3. Submit App to ItunesConnect with AppStore build\r\n\r\n### Expected Behavior\r\nBinary to be processed successfully for app release.\r\n\r\n### Actual Behavior\r\nBinary is rejected. Missing Info.plist value - A value for the Info.plist key 'CFBundleIconName' is missing in the bundle \r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms 2.5.0.280555 and above. VS2017 version 15.6.6\r\n- Last known good version: \r\n- IDE:VS2017\r\n- Platform Target Frameworks: \r\n- iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->  10.3 and above\r\n- Nuget Packages: Xamarin Forms 2.5.0.280555 and above.\r\n- Affected Devices: N/A\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7752983967","Type":"PullRequestEvent","CreatedAt":"2018-05-30T22:14:50","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3772","RelatedDescription":"Merged pull request \"[Linker] Remove bundled mscorlib.xml descriptor from mmp and mtouch\" (#3772) at xamarin/xamarin-macios","RelatedBody":"This fixes xamarin/xamarin-macios#3749\r\n\r\nWe currently process [both mscorlib.xml descriptors](https://github.com/xamarin/xamarin-macios/issues/3749#issuecomment-373770268) from the mtouch/mmp\r\nbundle and also the one contained in mscorlib.dll as resource, we are now removing\r\nthe descriptor bundled inside mtouch and mmp in favour of the one bundled in\r\nmscorlib.dll.\r\n\r\nSource descriptors files for diff:\r\n\r\nmono (master): https://github.com/mono/mono/blob/ea4274f2eb74cddf23c9c219b086cd41add0efce/mcs/class/corlib/LinkerDescriptor/mscorlib.xml\r\nXI (master): https://github.com/xamarin/xamarin-macios/blob/da6db5f6601b74fbc8324e974c83a4c33186dc12/tools/linker/Descriptors/mscorlib.xml\r\nXM (master): https://github.com/xamarin/xamarin-macios/blob/da6db5f6601b74fbc8324e974c83a4c33186dc12/tools/mmp/linker/Descriptors/mscorlib.xml\r\n\r\nDiffs:\r\n\r\nMono - XI descriptor diff: https://gist.github.com/dalexsoto/f0b1c9c66bf50edf8198063ec039a17b\r\nMono - XM descriptor diff: https://gist.github.com/dalexsoto/06b253a6743d366a4b9addc21a1e2c2a"},{"Id":"7752983957","Type":"IssuesEvent","CreatedAt":"2018-05-30T22:14:50","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3749","RelatedDescription":"Closed issue \"Remove Descriptors/mscorlib.xml\" (#3749) at xamarin/xamarin-macios","RelatedBody":"Mono bundles correct and updated mscorlib descriptor inside every mscorlib. The macios copies should be removed to not confuse the linker."},{"Id":"7752697734","Type":"PullRequestEvent","CreatedAt":"2018-05-30T21:08:17","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4152","RelatedDescription":"Merged pull request \"[xharness] Propagate harness failures from aggregated simulator tasks to each contained task.\" (#4152) at xamarin/xamarin-macios","RelatedBody":"This makes it so that if anything fails in the aggregated task, it will show\nup as a failure in each contained simulator task as well."},{"Id":"7752696542","Type":"IssuesEvent","CreatedAt":"2018-05-30T21:08:02","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4156","RelatedDescription":"Closed issue \"Merge Xcode9.4 support into 15.7 for stable release\" (#4156) at xamarin/xamarin-macios","RelatedBody":"https://github.com/xamarin/xamarin-macios/projects/1\n\n> VS bug [#623570](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/623570)"},{"Id":"7752693793","Type":"PullRequestEvent","CreatedAt":"2018-05-30T21:07:29","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4138","RelatedDescription":"Merged pull request \"[jenkins] Improve api/generator diff reporting to say if there were changes, and if they were breaking or not.\" (#4138) at xamarin/xamarin-macios","RelatedBody":"For the api diff for this PR we now show:\r\n\r\n* `🔥 breaking changes 🔥`: If there are any breaking changes in the api diff (for this PR).\r\n* `please review changes`: If there are any non-breaking changes in the api diff.\r\n* `no change`: If the api diff is empty.\r\n\r\nFor the generator diff we show:\r\n\r\n* `only version changes`: If there were only changes related to version numbers (since the XI/XM version number is added to the generator, that version number will always show up as a diff when comparing the generated source code)\r\n* `please review changes`: If anything other that version numbers changed in the generated source code."},{"Id":"7752111548","Type":"PullRequestEvent","CreatedAt":"2018-05-30T19:13:08","Actor":"ermau","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4161","RelatedDescription":"Opened pull request \"Improve IsCustomType performance\" (#4161) at xamarin/xamarin-macios","RelatedBody":"While NSObject may now flag internally whether it is a custom type, this still has to be looked up each time a new instance of that type is created.\r\n\r\nThe dynamic registrar has a fast lookup for whether a type is a custom type or not, but `IsCustomType` first checks the static registrar regardless. `GetClassHandle` already caches the class handles, so this extends it to include whether or not the type is custom so then `IsCustomType` can use the cached path.\r\n\r\nThis test case is improved from `0.27ms` per to `0.09ms` per new view when using the dynamic registrar.\r\n\r\n```csharp\r\npublic class Button\r\n    : NSView\r\n{\r\n    public Button()\r\n    {\r\n        checkbox = new NSButton\r\n        {\r\n            AllowsMixedState = true,\r\n            ControlSize = NSControlSize.Small,\r\n            Title = string.Empty,\r\n            TranslatesAutoresizingMaskIntoConstraints = false\r\n        };\r\n        checkbox.SetButtonType(NSButtonType.Switch);\r\n        checkbox.Activated += Button_Activated;\r\n\r\n        AddSubview(checkbox);\r\n    }\r\n\r\n    private NSButton checkbox;\r\n\r\n    void Button_Activated (object sender, EventArgs e)\r\n    {\r\n    }\r\n}```"},{"Id":"7751793452","Type":"PullRequestEvent","CreatedAt":"2018-05-30T18:12:37","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4160","RelatedDescription":"Merged pull request \"[apidiff] Update XML references to produce the API diff for xcode9.4 support\" (#4160) at xamarin/xamarin-macios","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1001900437233119234","CreatedAt":"2018-05-30T18:57:33+00:00","UserScreenname":"xamarinhq","Text":"We've got some great @XamarinU Guest Lectures coming up that you won't want to miss! Check them out, and make sure… https://t.co/REGhq5ZF12","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":9,"RawContent":null},{"Id":"1001568114855890945","CreatedAt":"2018-05-29T20:57:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/UH3gpAFFHj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":37,"RawContent":null},{"Id":"1000859470057132032","CreatedAt":"2018-05-27T22:01:07+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/iNmDBtF3zX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":18,"RawContent":null},{"Id":"1000408472083673089","CreatedAt":"2018-05-26T16:09:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/t7b1GH4pMp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":10,"RawContent":null},{"Id":"1000081068660330497","CreatedAt":"2018-05-25T18:28:02+00:00","UserScreenname":"xamarinhq","Text":"Join our open source family and help make https://t.co/3QxhuBuvHc even better: https://t.co/6h1HH1dTAM https://t.co/5go35jCm9N","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":75,"FavoriteCount":34,"RawContent":null},{"Id":"999682195089436672","CreatedAt":"2018-05-24T16:03:03+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/81dQ3CWoSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":55,"FavoriteCount":13,"RawContent":null},{"Id":"999389007191728134","CreatedAt":"2018-05-23T20:38:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to secure and version your #Xamarin apps in this guest post on Mobile.BuildTools: https://t.co/NTtOmsdDTl https://t.co/ks5Q3K2joU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":17,"RawContent":null},{"Id":"998953429568573440","CreatedAt":"2018-05-22T15:47:11+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/2E1zBel6Cr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":21,"RawContent":null},{"Id":"998352195631435777","CreatedAt":"2018-05-20T23:58:06+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/tO3s7DT35f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":124,"FavoriteCount":46,"RawContent":null},{"Id":"997143964397572096","CreatedAt":"2018-05-17T15:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/LeAoHXXaA6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"996824503241052160","CreatedAt":"2018-05-16T18:47:36+00:00","UserScreenname":"xamarinhq","Text":"Get started with #XamarinEssentials cross-platform APIs: https://t.co/sW5UgLfeGb https://t.co/Bw4ufWhGP8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":150,"FavoriteCount":79,"RawContent":null},{"Id":"996785351665463297","CreatedAt":"2018-05-16T16:12:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/UZ5l6JaWcB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":11,"RawContent":null},{"Id":"996750580969365506","CreatedAt":"2018-05-16T13:53:51+00:00","UserScreenname":"xamarinhq","Text":"Learn about some small changes coming as we integrate https://t.co/iLyxWYOFfj content into Microsoft sites: https://t.co/RcvPgvkPTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":8,"RawContent":null},{"Id":"996423969308921856","CreatedAt":"2018-05-15T16:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/2LzUatSvjX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":24,"RawContent":null},{"Id":"996420693481938944","CreatedAt":"2018-05-15T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/aiwQSbkh1B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":24,"RawContent":null},{"Id":"996099804915814401","CreatedAt":"2018-05-14T18:47:54+00:00","UserScreenname":"xamarinhq","Text":"Avoid compromises in the next version of macOS by updating your Xamarin.Mac apps for 64-bit today: https://t.co/IB6aLnHlAq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"996040460673142784","CreatedAt":"2018-05-14T14:52:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/Z262pfyFdQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":24,"RawContent":null},{"Id":"995782486859964418","CreatedAt":"2018-05-13T21:47:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":79,"FavoriteCount":34,"RawContent":null},{"Id":"995405503118430215","CreatedAt":"2018-05-12T20:49:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"995013274252009473","CreatedAt":"2018-05-11T18:50:25+00:00","UserScreenname":"xamarinhq","Text":"On this week's epsiode of the #XamarinPodcast, get the #MSBuild 2018 recap for mobile developers: https://t.co/UhjdSxsePY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":32,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-05-31T05:30:44.392582Z","RunDurationInMilliseconds":4366}